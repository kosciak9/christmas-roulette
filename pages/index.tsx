import type { NextPage } from "next";
import ntc from "ntcjs";
import Head from "next/head";
import Snowfall from "react-snowfall";
import { useState } from "react";
import { random, sample } from "lodash";
import {
    Button,
    Center,
    Heading,
    Stack,
    Text,
    Link,
    Spinner,
    Code,
    Box,
    Flex,
} from "@chakra-ui/react";
import { AnimatePresence, motion } from "framer-motion";

const colors = [
    "#ffadad",
    "#ffd6a5",
    "#fdffb6",
    "#caffbf",
    "#9bf6ff",
    "#a0c4ff",
    "#bdb2ff",
    "#ffc6ff",
    "#fffffc",
];
const letters =
    "a, b, c, ƒá, d, e, f, g, h, i, j, k, l, ≈Ç, m, n, o, p, q, r, s, ≈õ, t, u, v, w, x, y, z".split(
        ", "
    );

const generateCombinations = () => {
    let combinations = [];

    for (let i = 0; i < 200; i++) {
        const color = sample(colors) || colors[0];
        const letter = sample(letters) || letters[0];
        combinations.push({ color, letter });
    }

    return combinations;
};

const Home: NextPage = () => {
    const [combinations, setCombinations] = useState<
        Array<{ color: string; letter: string }>
    >([]);
    const [activeCombinationIndex, setActiveCombinationIndex] = useState(0);
    const { color: activeColor, letter: activeLetter } = combinations[activeCombinationIndex] || { color: "#fff", letter: "a" };
    const [mode, setMode] = useState(
        "IDLE" as "IDLE" | "GENERATION" | "READY_TO_GO" | "LOADING" | "RESULT"
    );

    const handleIdle = () => {
        setMode("GENERATION");
        Promise.all([
            generateCombinations,
            new Promise((res) => setTimeout(res, 500)),
        ])
            .then(([combinations]) => setCombinations(combinations))
            .then(() => setMode("READY_TO_GO"));
    };

    const handleReadyToGo = () => {
        setMode("LOADING");

        let count = 1;

        const handleChange = () => {
            if (count < 180) {
                count = count + Math.sqrt(count) * 0.15;
            } else {
                count = count + count * 1.2;
            }
            setActiveCombinationIndex(random((combinations.length || 1) - 1));
            if (count <= 2500) {
                setTimeout(handleChange, count);
            } else {
                setTimeout(() => {
                    setMode("RESULT");
                }, 500);
            }
        };

        handleChange();
    };

    const handleResult = handleReadyToGo;

    return (
        <>
            <Head>
                <title>≈öwiƒÖteczna ruletka</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Flex justifyContent="center" alignItems="flex-start" as="main" minH="100vh" background="url('/christmas-dark.png')">
                <Snowfall />
                <Stack
                    spacing={16}
                    color="white"
                    alignItems="center"
                    maxW={800}
                    minH="100vh"
                    h="100%"
                    backgroundColor="rgba(0, 0, 0, 0.5)"
                    padding={8}
                    paddingTop={12}
                >
                    <Heading>üéÑ ≈öwiƒÖteczna ruletka üé∞</Heading>
                    <Text>
                        Zasady sƒÖ proste: zamiast losowaƒá osoby - losujemy literkƒô i kolor.
                        A potem kupujemy prezenty (ka≈ºdy po jednym @Szymi) i wrzucamy je pod
                        choinkƒô. Na wsp√≥lnym spotkaniu ka≈ºdy wylosuje jeden!
                    </Text>
                    <Stack spacing={2} p={4} position="relative" alignItems="center">
                        {mode === "IDLE" ? (
                            <Button size="lg" colorScheme="orange" onClick={handleIdle}>
                                Przygotuj kombinacje
                            </Button>
                        ) : null}
                        {mode === "GENERATION" ? (
                            <>
                                <Spinner my={4} />
                                <Text>≈ÅƒÖczymy kolor z literami...</Text>
                            </>
                        ) : null}
                        {mode === "READY_TO_GO" ? (
                            <Button size="lg" colorScheme="green" onClick={handleReadyToGo}>
                                Losujmy!
                            </Button>
                        ) : null}
                        {mode === "LOADING" ? (
                            <AnimatePresence>
                                <motion.div
                                    key="activeChoice"
                                    style={{ position: 'absolute', paddingBottom: 16 }}
                                    initial={{ opacity: 0 }}
                                    animate={{ opacity: 1 }}
                                    exit={{ opacity: 0 }}
                                >
                                    <Heading
                                        fontSize="4em"
                                        color={activeColor}
                                    >
                                        {activeLetter}
                                    </Heading>
                                </motion.div>
                            </AnimatePresence>
                        ) : null}
                        {mode === "RESULT" ? (
                            <>
                                <Heading fontSize="4em" color={activeColor}>
                                    {activeLetter}
                                </Heading>
                                <Text mt={6}>Gratulacje, wylosowa≈Çe≈õ swojƒÖ¬†kombinacjƒô!</Text>
                                <Text>Kolor to:</Text>
                                <Code as='pre'>{activeColor}</Code>
                                <Text>zwany te≈º...</Text>
                                <Text fontWeight="bold" fontSize="1.5em">{ntc.name(activeColor)[1]}</Text>
                                <Button mt={12} variant="outline" colorScheme="blue" onClick={handleResult}>Chyba ≈ºartujesz, jeszcze raz!</Button>
                            </>
                        ) : null}
                    </Stack>
                </Stack>
            </Flex>
            <Text textAlign="center" position="fixed" bottom={10} left="calc(50vw - 200px)" width={400} color="rgba(255, 255, 255, 0.5)">
                Sponsorowane przez Tele≈ºabki (
                <Link href="https://madneeco.pl">join us!</Link>)
            </Text>
        </>
    );
};

export default Home;
